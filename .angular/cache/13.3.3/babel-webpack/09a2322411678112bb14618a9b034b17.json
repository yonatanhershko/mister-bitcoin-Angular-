{"ast":null,"code":"import { BehaviorSubject, throwError, from, tap, retry, catchError } from 'rxjs';\nimport { storageService } from './async-storage.service';\nimport { Contact } from '../models/contact.model';\nimport * as i0 from \"@angular/core\";\nconst ENTITY = 'contacts';\nexport class ContactService {\n  constructor() {\n    this._contacts$ = new BehaviorSubject([]);\n    this.contacts$ = this._contacts$.asObservable();\n    this._contactFilter$ = new BehaviorSubject({\n      term: ''\n    });\n    this.contactFilter$ = this._contactFilter$.asObservable(); // Handling Demo Data, fetching from storage || saving to storage \n\n    const contacts = JSON.parse(localStorage.getItem(ENTITY) || 'null');\n\n    if (!contacts || contacts.length === 0) {\n      localStorage.setItem(ENTITY, JSON.stringify(this._createContacts()));\n    }\n  }\n\n  setContactFilter(contactFilter) {\n    this._contactFilter$.next(contactFilter);\n\n    this.loadContacts().subscribe();\n  }\n\n  loadContacts() {\n    return from(storageService.query(ENTITY)).pipe(tap(contacts => {\n      const contactFilter = this._contactFilter$.value;\n\n      if (contactFilter && contactFilter.term) {\n        contacts = this._filter(contacts, contactFilter.term);\n      }\n\n      this._contacts$.next(this._sort(contacts));\n    }), retry(1), catchError(this._handleError));\n  }\n\n  getContactById(id) {\n    return from(storageService.get(ENTITY, id)).pipe(catchError(this._handleError));\n  }\n\n  deleteContact(id) {\n    return from(storageService.remove(ENTITY, id)).pipe(tap(() => {\n      let contacts = this._contacts$.value;\n      contacts = contacts.filter(contact => contact._id !== id);\n\n      this._contacts$.next(contacts);\n    }), retry(1), catchError(this._handleError));\n  }\n\n  saveContact(contact) {\n    return contact._id ? this._updateContact(contact) : this._addContact(contact);\n  }\n\n  getEmptyContact() {\n    return {\n      name: '',\n      email: '',\n      phone: ''\n    };\n  }\n\n  _updateContact(contact) {\n    return from(storageService.post(ENTITY, contact)).pipe(tap(updatedContact => {\n      const contacts = this._contacts$.value;\n\n      this._contacts$.next(contacts.map(contact => contact._id === updatedContact._id ? updatedContact : contact));\n    }), retry(1), catchError(this._handleError));\n  }\n\n  _addContact(contact) {\n    const newContact = new Contact(contact.name, contact.email, contact.phone);\n    if (typeof newContact.setId === 'function') newContact.setId(this._getRandomId());\n    return from(storageService.post(ENTITY, contact)).pipe(tap(newContact => {\n      const contacts = this._contacts$.value;\n\n      this._contacts$.next([...contacts, newContact]);\n    }), retry(1), catchError(this._handleError));\n  }\n\n  _sort(contacts) {\n    return contacts.sort((a, b) => {\n      if (a.name.toLocaleLowerCase() < b.name.toLocaleLowerCase()) {\n        return -1;\n      }\n\n      if (a.name.toLocaleLowerCase() > b.name.toLocaleLowerCase()) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }\n\n  _filter(contacts, term) {\n    term = term.toLocaleLowerCase();\n    return contacts.filter(contact => {\n      return contact.name.toLocaleLowerCase().includes(term) || contact.phone.toLocaleLowerCase().includes(term) || contact.email.toLocaleLowerCase().includes(term);\n    });\n  }\n\n  _createContacts() {\n    const contacts = [{\n      \"_id\": \"5a56640269f443a5d64b32ca\",\n      \"name\": \"Ochoa Hyde\",\n      \"email\": \"ochoahyde@renovize.com\",\n      \"phone\": \"+1 (968) 593-3824\"\n    }, {\n      \"_id\": \"5a5664025f6ae9aa24a99fde\",\n      \"name\": \"Hallie Mclean\",\n      \"email\": \"halliemclean@renovize.com\",\n      \"phone\": \"+1 (948) 464-2888\"\n    }, {\n      \"_id\": \"5a56640252d6acddd183d319\",\n      \"name\": \"Parsons Norris\",\n      \"email\": \"parsonsnorris@renovize.com\",\n      \"phone\": \"+1 (958) 502-3495\"\n    }, {\n      \"_id\": \"5a566402ed1cf349f0b47b4d\",\n      \"name\": \"Rachel Lowe\",\n      \"email\": \"rachellowe@renovize.com\",\n      \"phone\": \"+1 (911) 475-2312\"\n    }, {\n      \"_id\": \"5a566402abce24c6bfe4699d\",\n      \"name\": \"Dominique Soto\",\n      \"email\": \"dominiquesoto@renovize.com\",\n      \"phone\": \"+1 (807) 551-3258\"\n    }, {\n      \"_id\": \"5a566402a6499c1d4da9220a\",\n      \"name\": \"Shana Pope\",\n      \"email\": \"shanapope@renovize.com\",\n      \"phone\": \"+1 (970) 527-3082\"\n    }, {\n      \"_id\": \"5a566402f90ae30e97f990db\",\n      \"name\": \"Faulkner Flores\",\n      \"email\": \"faulknerflores@renovize.com\",\n      \"phone\": \"+1 (952) 501-2678\"\n    }, {\n      \"_id\": \"5a5664027bae84ef280ffbdf\",\n      \"name\": \"Holder Bean\",\n      \"email\": \"holderbean@renovize.com\",\n      \"phone\": \"+1 (989) 503-2663\"\n    }, {\n      \"_id\": \"5a566402e3b846c5f6aec652\",\n      \"name\": \"Rosanne Shelton\",\n      \"email\": \"rosanneshelton@renovize.com\",\n      \"phone\": \"+1 (968) 454-3851\"\n    }, {\n      \"_id\": \"5a56640272c7dcdf59c3d411\",\n      \"name\": \"Pamela Nolan\",\n      \"email\": \"pamelanolan@renovize.com\",\n      \"phone\": \"+1 (986) 545-2166\"\n    }, {\n      \"_id\": \"5a5664029a8dd82a6178b15f\",\n      \"name\": \"Roy Cantu\",\n      \"email\": \"roycantu@renovize.com\",\n      \"phone\": \"+1 (929) 571-2295\"\n    }, {\n      \"_id\": \"5a5664028c096d08eeb13a8a\",\n      \"name\": \"Ollie Christian\",\n      \"email\": \"olliechristian@renovize.com\",\n      \"phone\": \"+1 (977) 419-3550\"\n    }, {\n      \"_id\": \"5a5664026c53582bb9ebe9d1\",\n      \"name\": \"Nguyen Walls\",\n      \"email\": \"nguyenwalls@renovize.com\",\n      \"phone\": \"+1 (963) 471-3181\"\n    }, {\n      \"_id\": \"5a56640298ab77236845b82b\",\n      \"name\": \"Glenna Santana\",\n      \"email\": \"glennasantana@renovize.com\",\n      \"phone\": \"+1 (860) 467-2376\"\n    }, {\n      \"_id\": \"5a56640208fba3e8ecb97305\",\n      \"name\": \"Malone Clark\",\n      \"email\": \"maloneclark@renovize.com\",\n      \"phone\": \"+1 (818) 565-2557\"\n    }, {\n      \"_id\": \"5a566402abb3146207bc4ec5\",\n      \"name\": \"Floyd Rutledge\",\n      \"email\": \"floydrutledge@renovize.com\",\n      \"phone\": \"+1 (807) 597-3629\"\n    }, {\n      \"_id\": \"5a56640298500fead8cb1ee5\",\n      \"name\": \"Grace James\",\n      \"email\": \"gracejames@renovize.com\",\n      \"phone\": \"+1 (959) 525-2529\"\n    }, {\n      \"_id\": \"5a56640243427b8f8445231e\",\n      \"name\": \"Tanner Gates\",\n      \"email\": \"tannergates@renovize.com\",\n      \"phone\": \"+1 (978) 591-2291\"\n    }, {\n      \"_id\": \"5a5664025c3abdad6f5e098c\",\n      \"name\": \"Lilly Conner\",\n      \"email\": \"lillyconner@renovize.com\",\n      \"phone\": \"+1 (842) 587-3812\"\n    }];\n    return contacts;\n  }\n\n  _handleError(err) {\n    console.log('error in pet service:', err);\n    return throwError(() => err);\n  }\n\n  _getRandomId(length = 8) {\n    let result = '';\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n    for (var i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * characters.length));\n    }\n\n    return result;\n  }\n\n}\n\nContactService.ɵfac = function ContactService_Factory(t) {\n  return new (t || ContactService)();\n};\n\nContactService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ContactService,\n  factory: ContactService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/yonhe/Desktop/קורס Full Stuck/השלמות/סדנת אנגולר/ex3/angular-materials-day03/cr/mister-bitcoin/src/app/services/contact.service.ts"],"names":["BehaviorSubject","throwError","from","tap","retry","catchError","storageService","Contact","i0","ENTITY","ContactService","constructor","_contacts$","contacts$","asObservable","_contactFilter$","term","contactFilter$","contacts","JSON","parse","localStorage","getItem","length","setItem","stringify","_createContacts","setContactFilter","contactFilter","next","loadContacts","subscribe","query","pipe","value","_filter","_sort","_handleError","getContactById","id","get","deleteContact","remove","filter","contact","_id","saveContact","_updateContact","_addContact","getEmptyContact","name","email","phone","post","updatedContact","map","newContact","setId","_getRandomId","sort","a","b","toLocaleLowerCase","includes","err","console","log","result","characters","i","charAt","Math","floor","random","ɵfac","ContactService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { BehaviorSubject, throwError, from, tap, retry, catchError } from 'rxjs';\r\nimport { storageService } from './async-storage.service';\r\nimport { Contact } from '../models/contact.model';\r\nimport * as i0 from \"@angular/core\";\r\nconst ENTITY = 'contacts';\r\nexport class ContactService {\r\n    constructor() {\r\n        this._contacts$ = new BehaviorSubject([]);\r\n        this.contacts$ = this._contacts$.asObservable();\r\n        this._contactFilter$ = new BehaviorSubject({ term: '' });\r\n        this.contactFilter$ = this._contactFilter$.asObservable();\r\n        // Handling Demo Data, fetching from storage || saving to storage \r\n        const contacts = JSON.parse(localStorage.getItem(ENTITY) || 'null');\r\n        if (!contacts || contacts.length === 0) {\r\n            localStorage.setItem(ENTITY, JSON.stringify(this._createContacts()));\r\n        }\r\n    }\r\n    setContactFilter(contactFilter) {\r\n        this._contactFilter$.next(contactFilter);\r\n        this.loadContacts().subscribe();\r\n    }\r\n    loadContacts() {\r\n        return from(storageService.query(ENTITY))\r\n            .pipe(tap(contacts => {\r\n            const contactFilter = this._contactFilter$.value;\r\n            if (contactFilter && contactFilter.term) {\r\n                contacts = this._filter(contacts, contactFilter.term);\r\n            }\r\n            this._contacts$.next(this._sort(contacts));\r\n        }), retry(1), catchError(this._handleError));\r\n    }\r\n    getContactById(id) {\r\n        return from(storageService.get(ENTITY, id))\r\n            .pipe(catchError(this._handleError));\r\n    }\r\n    deleteContact(id) {\r\n        return from(storageService.remove(ENTITY, id))\r\n            .pipe(tap(() => {\r\n            let contacts = this._contacts$.value;\r\n            contacts = contacts.filter(contact => contact._id !== id);\r\n            this._contacts$.next(contacts);\r\n        }), retry(1), catchError(this._handleError));\r\n    }\r\n    saveContact(contact) {\r\n        return contact._id ? this._updateContact(contact) : this._addContact(contact);\r\n    }\r\n    getEmptyContact() {\r\n        return {\r\n            name: '',\r\n            email: '',\r\n            phone: ''\r\n        };\r\n    }\r\n    _updateContact(contact) {\r\n        return from(storageService.post(ENTITY, contact))\r\n            .pipe(tap(updatedContact => {\r\n            const contacts = this._contacts$.value;\r\n            this._contacts$.next(contacts.map(contact => contact._id === updatedContact._id ? updatedContact : contact));\r\n        }), retry(1), catchError(this._handleError));\r\n    }\r\n    _addContact(contact) {\r\n        const newContact = new Contact(contact.name, contact.email, contact.phone);\r\n        if (typeof newContact.setId === 'function')\r\n            newContact.setId(this._getRandomId());\r\n        return from(storageService.post(ENTITY, contact))\r\n            .pipe(tap(newContact => {\r\n            const contacts = this._contacts$.value;\r\n            this._contacts$.next([...contacts, newContact]);\r\n        }), retry(1), catchError(this._handleError));\r\n    }\r\n    _sort(contacts) {\r\n        return contacts.sort((a, b) => {\r\n            if (a.name.toLocaleLowerCase() < b.name.toLocaleLowerCase()) {\r\n                return -1;\r\n            }\r\n            if (a.name.toLocaleLowerCase() > b.name.toLocaleLowerCase()) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        });\r\n    }\r\n    _filter(contacts, term) {\r\n        term = term.toLocaleLowerCase();\r\n        return contacts.filter(contact => {\r\n            return contact.name.toLocaleLowerCase().includes(term) ||\r\n                contact.phone.toLocaleLowerCase().includes(term) ||\r\n                contact.email.toLocaleLowerCase().includes(term);\r\n        });\r\n    }\r\n    _createContacts() {\r\n        const contacts = [\r\n            {\r\n                \"_id\": \"5a56640269f443a5d64b32ca\",\r\n                \"name\": \"Ochoa Hyde\",\r\n                \"email\": \"ochoahyde@renovize.com\",\r\n                \"phone\": \"+1 (968) 593-3824\"\r\n            },\r\n            {\r\n                \"_id\": \"5a5664025f6ae9aa24a99fde\",\r\n                \"name\": \"Hallie Mclean\",\r\n                \"email\": \"halliemclean@renovize.com\",\r\n                \"phone\": \"+1 (948) 464-2888\"\r\n            },\r\n            {\r\n                \"_id\": \"5a56640252d6acddd183d319\",\r\n                \"name\": \"Parsons Norris\",\r\n                \"email\": \"parsonsnorris@renovize.com\",\r\n                \"phone\": \"+1 (958) 502-3495\"\r\n            },\r\n            {\r\n                \"_id\": \"5a566402ed1cf349f0b47b4d\",\r\n                \"name\": \"Rachel Lowe\",\r\n                \"email\": \"rachellowe@renovize.com\",\r\n                \"phone\": \"+1 (911) 475-2312\"\r\n            },\r\n            {\r\n                \"_id\": \"5a566402abce24c6bfe4699d\",\r\n                \"name\": \"Dominique Soto\",\r\n                \"email\": \"dominiquesoto@renovize.com\",\r\n                \"phone\": \"+1 (807) 551-3258\"\r\n            },\r\n            {\r\n                \"_id\": \"5a566402a6499c1d4da9220a\",\r\n                \"name\": \"Shana Pope\",\r\n                \"email\": \"shanapope@renovize.com\",\r\n                \"phone\": \"+1 (970) 527-3082\"\r\n            },\r\n            {\r\n                \"_id\": \"5a566402f90ae30e97f990db\",\r\n                \"name\": \"Faulkner Flores\",\r\n                \"email\": \"faulknerflores@renovize.com\",\r\n                \"phone\": \"+1 (952) 501-2678\"\r\n            },\r\n            {\r\n                \"_id\": \"5a5664027bae84ef280ffbdf\",\r\n                \"name\": \"Holder Bean\",\r\n                \"email\": \"holderbean@renovize.com\",\r\n                \"phone\": \"+1 (989) 503-2663\"\r\n            },\r\n            {\r\n                \"_id\": \"5a566402e3b846c5f6aec652\",\r\n                \"name\": \"Rosanne Shelton\",\r\n                \"email\": \"rosanneshelton@renovize.com\",\r\n                \"phone\": \"+1 (968) 454-3851\"\r\n            },\r\n            {\r\n                \"_id\": \"5a56640272c7dcdf59c3d411\",\r\n                \"name\": \"Pamela Nolan\",\r\n                \"email\": \"pamelanolan@renovize.com\",\r\n                \"phone\": \"+1 (986) 545-2166\"\r\n            },\r\n            {\r\n                \"_id\": \"5a5664029a8dd82a6178b15f\",\r\n                \"name\": \"Roy Cantu\",\r\n                \"email\": \"roycantu@renovize.com\",\r\n                \"phone\": \"+1 (929) 571-2295\"\r\n            },\r\n            {\r\n                \"_id\": \"5a5664028c096d08eeb13a8a\",\r\n                \"name\": \"Ollie Christian\",\r\n                \"email\": \"olliechristian@renovize.com\",\r\n                \"phone\": \"+1 (977) 419-3550\"\r\n            },\r\n            {\r\n                \"_id\": \"5a5664026c53582bb9ebe9d1\",\r\n                \"name\": \"Nguyen Walls\",\r\n                \"email\": \"nguyenwalls@renovize.com\",\r\n                \"phone\": \"+1 (963) 471-3181\"\r\n            },\r\n            {\r\n                \"_id\": \"5a56640298ab77236845b82b\",\r\n                \"name\": \"Glenna Santana\",\r\n                \"email\": \"glennasantana@renovize.com\",\r\n                \"phone\": \"+1 (860) 467-2376\"\r\n            },\r\n            {\r\n                \"_id\": \"5a56640208fba3e8ecb97305\",\r\n                \"name\": \"Malone Clark\",\r\n                \"email\": \"maloneclark@renovize.com\",\r\n                \"phone\": \"+1 (818) 565-2557\"\r\n            },\r\n            {\r\n                \"_id\": \"5a566402abb3146207bc4ec5\",\r\n                \"name\": \"Floyd Rutledge\",\r\n                \"email\": \"floydrutledge@renovize.com\",\r\n                \"phone\": \"+1 (807) 597-3629\"\r\n            },\r\n            {\r\n                \"_id\": \"5a56640298500fead8cb1ee5\",\r\n                \"name\": \"Grace James\",\r\n                \"email\": \"gracejames@renovize.com\",\r\n                \"phone\": \"+1 (959) 525-2529\"\r\n            },\r\n            {\r\n                \"_id\": \"5a56640243427b8f8445231e\",\r\n                \"name\": \"Tanner Gates\",\r\n                \"email\": \"tannergates@renovize.com\",\r\n                \"phone\": \"+1 (978) 591-2291\"\r\n            },\r\n            {\r\n                \"_id\": \"5a5664025c3abdad6f5e098c\",\r\n                \"name\": \"Lilly Conner\",\r\n                \"email\": \"lillyconner@renovize.com\",\r\n                \"phone\": \"+1 (842) 587-3812\"\r\n            }\r\n        ];\r\n        return contacts;\r\n    }\r\n    _handleError(err) {\r\n        console.log('error in pet service:', err);\r\n        return throwError(() => err);\r\n    }\r\n    _getRandomId(length = 8) {\r\n        let result = '';\r\n        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        for (var i = 0; i < length; i++) {\r\n            result += characters.charAt(Math.floor(Math.random() * characters.length));\r\n        }\r\n        return result;\r\n    }\r\n}\r\nContactService.ɵfac = function ContactService_Factory(t) { return new (t || ContactService)(); };\r\nContactService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ContactService, factory: ContactService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}