{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\yonhe\\\\Desktop\\\\\\u05E7\\u05D5\\u05E8\\u05E1 Full Stuck\\\\\\u05D4\\u05E9\\u05DC\\u05DE\\u05D5\\u05EA\\\\\\u05E1\\u05D3\\u05E0\\u05EA \\u05D0\\u05E0\\u05D2\\u05D5\\u05DC\\u05E8\\\\ex3\\\\angular-materials-day03\\\\cr\\\\mister-bitcoin\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nexport const storageService = {\n  query,\n  get,\n  post,\n  put,\n  remove,\n  makeId\n};\n\nfunction query(_x) {\n  return _query.apply(this, arguments);\n}\n\nfunction _query() {\n  _query = _asyncToGenerator(function* (entityType, delay = 10) {\n    var entities = JSON.parse(localStorage.getItem(entityType) || 'null') || [];\n\n    if (delay) {\n      return new Promise(resolve => setTimeout(resolve, delay, entities));\n    }\n\n    return entities;\n  });\n  return _query.apply(this, arguments);\n}\n\nfunction get(_x2, _x3) {\n  return _get.apply(this, arguments);\n}\n\nfunction _get() {\n  _get = _asyncToGenerator(function* (entityType, entityId) {\n    const entities = yield query(entityType);\n    const entity = entities.find(entity => entity._id === entityId);\n    if (!entity) throw new Error(`Cannot get, Item ${entityId} of type: ${entityType} does not exist`);\n    return entity;\n  });\n  return _get.apply(this, arguments);\n}\n\nfunction post(_x4, _x5) {\n  return _post.apply(this, arguments);\n}\n\nfunction _post() {\n  _post = _asyncToGenerator(function* (entityType, newEntity) {\n    const entities = yield query(entityType);\n    entities.push(newEntity);\n\n    _save(entityType, entities);\n\n    return newEntity;\n  });\n  return _post.apply(this, arguments);\n}\n\nfunction put(_x6, _x7) {\n  return _put.apply(this, arguments);\n}\n\nfunction _put() {\n  _put = _asyncToGenerator(function* (entityType, updatedEntity) {\n    const entities = yield query(entityType);\n    const idx = entities.findIndex(entity => entity._id === updatedEntity._id);\n    entities[idx] = updatedEntity;\n\n    _save(entityType, entities);\n\n    return updatedEntity;\n  });\n  return _put.apply(this, arguments);\n}\n\nfunction remove(_x8, _x9) {\n  return _remove.apply(this, arguments);\n}\n\nfunction _remove() {\n  _remove = _asyncToGenerator(function* (entityType, entityId) {\n    const entities = yield query(entityType);\n    const idx = entities.findIndex(entity => entity._id === entityId);\n    if (idx !== -1) entities.splice(idx, 1);else throw new Error(`Cannot remove, item ${entityId} of type: ${entityType} does not exist`);\n\n    _save(entityType, entities);\n\n    return entityId;\n  });\n  return _remove.apply(this, arguments);\n}\n\nfunction _save(entityType, entities) {\n  localStorage.setItem(entityType, JSON.stringify(entities));\n}\n\nfunction makeId(length = 5) {\n  var txt = '';\n  var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n  for (var i = 0; i < length; i++) {\n    txt += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n\n  return txt;\n}","map":{"version":3,"sources":["C:/Users/yonhe/Desktop/קורס Full Stuck/השלמות/סדנת אנגולר/ex3/angular-materials-day03/cr/mister-bitcoin/src/app/services/async-storage.service.ts"],"names":["storageService","query","get","post","put","remove","makeId","entityType","delay","entities","JSON","parse","localStorage","getItem","Promise","resolve","setTimeout","entityId","entity","find","_id","Error","newEntity","push","_save","updatedEntity","idx","findIndex","splice","setItem","stringify","length","txt","possible","i","charAt","Math","floor","random"],"mappings":"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","sourcesContent":["export const storageService = {\r\n    query,\r\n    get,\r\n    post,\r\n    put,\r\n    remove,\r\n    makeId\r\n};\r\nasync function query(entityType, delay = 10) {\r\n    var entities = JSON.parse(localStorage.getItem(entityType) || 'null') || [];\r\n    if (delay) {\r\n        return new Promise((resolve) => setTimeout(resolve, delay, entities));\r\n    }\r\n    return entities;\r\n}\r\nasync function get(entityType, entityId) {\r\n    const entities = await query(entityType);\r\n    const entity = entities.find(entity => entity._id === entityId);\r\n    if (!entity)\r\n        throw new Error(`Cannot get, Item ${entityId} of type: ${entityType} does not exist`);\r\n    return entity;\r\n}\r\nasync function post(entityType, newEntity) {\r\n    const entities = await query(entityType);\r\n    entities.push(newEntity);\r\n    _save(entityType, entities);\r\n    return newEntity;\r\n}\r\nasync function put(entityType, updatedEntity) {\r\n    const entities = await query(entityType);\r\n    const idx = entities.findIndex(entity => entity._id === updatedEntity._id);\r\n    entities[idx] = updatedEntity;\r\n    _save(entityType, entities);\r\n    return updatedEntity;\r\n}\r\nasync function remove(entityType, entityId) {\r\n    const entities = await query(entityType);\r\n    const idx = entities.findIndex(entity => entity._id === entityId);\r\n    if (idx !== -1)\r\n        entities.splice(idx, 1);\r\n    else\r\n        throw new Error(`Cannot remove, item ${entityId} of type: ${entityType} does not exist`);\r\n    _save(entityType, entities);\r\n    return entityId;\r\n}\r\nfunction _save(entityType, entities) {\r\n    localStorage.setItem(entityType, JSON.stringify(entities));\r\n}\r\nfunction makeId(length = 5) {\r\n    var txt = '';\r\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    for (var i = 0; i < length; i++) {\r\n        txt += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n    return txt;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}